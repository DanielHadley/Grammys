sapply(d[1,],class)
str(d) #number of observations, number of vars, class of variables
head(d, 20)
### Clean and Transorm your Data ###
# I often need to transorm data that is stored as factor or character to numeric
# For example, if there is a "?" in one cell, it will be stored as non numeric
d$col2Numeric <- as.numeric(as.character(d$col2)) # Transforms to numeric
# Sometimes variables stored as factors have characters that generate unexpected results when as.numeric is applied.
# Use gsub to remove these characters by removing them (technically, replacing them with nothing).
# For example, use this code if your values look like this: $1,000. For more on gsub see: http://www.endmemo.com/program/R/gsub.php
data$var.clean <- gsub("([/$,])", "", data$var)
data$var.clean <- as.numeric(data$var) #OR, more simply
data$var.clean <- as.numeric(gsub("([/$,])", "", data$var))
# Missing Values
missing <- is.na(d$col1)
sum(missing) #Number of missing values
sum(!missing) #Number of non-missing values
#OR
good <- complete.cases(d$col1)
sum(!good) #Number of missing values
sum(good) #Number of non-missing values
# Dropping (removing)
remove(good) #object
remove(missing) # also works with a dataframe
# To drop variable/column:
d$col1 <- NULL #column OR
d <- subset(d, select = -c(col1)) #OR
# To drop an observation/row
d <- d[-917,]
# To drop observations with a given value:
d <- subset(d, col3 %in% c("a","b"))
# To Select an observation
newdata <- d[ which(d$col3=='a' | d$col3 == 'b'), ]
# To reshape data: see: http://www.ats.ucla.edu/stat/r/faq/reshape.htm
# Date
d$Date <- as.Date(d$Date,"%m/%d/%Y") # Tell R it's a date
d$Month <- format(d$Date, format='%m') # Break it into month, day, year...
d$Day <- format(d$Date, format='%d')
d$Year <- format(d$Date, format='%Y')
d$Month <- as.numeric(as.character(d$Month)) # Transform month to numeric for ifelse
# There are more nuanced ways of dividing seasons, but I prefer 4 even periods:
d$Season <- ifelse((d$Month >= 3) & (d$Month <= 5), "Spring",
ifelse((d$Month >= 6) & (d$Month <= 8), "Summer",
ifelse((d$Month >= 9) & (d$Month <= 11), "Fall", "Winter")))
# How to switch from Excel: the pivot table
aggregate(col2Numeric ~ Year, d, sum ) # makes a two-way table
# aggregate works for a couple of variables.
# "Cast" from reshape2 works when you have more than two variables:
# http://marcoghislanzoni.com/blog/2013/10/11/pivot-tables-in-r-with-melt-and-cast/
library(reshape2)
sapply(d[1,],class) #look at these again to see which columns to include
names(d) #look at the names
data.m <- melt(d, id=c(2:4, 5, 9:12), measure=c(8)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Year ~ variable, sum)
library(plyr)
d <- d[order(-d$col2Numeric),] # sort it
# just the top 2 most frequent seasons
d.top <- subset(d, Season %in% arrange(count(d, .(Season)), desc(freq))[1:2,]$Season)
# Export
write.csv(d, file = "mydf.csv")
###  Visualize ###
library(ggplot2)
library(scales) # for changing from scientific notation
# Example scale feature: scale_y_continuous(labels = comma) or scale_y_continuous(labels = dollar)
View(d.top)
View(d)
# Boilerplate R Code
# Created by Daniel Hadley, 2014
# These packages are used at various points:
# install.packages("reshape2", "plyr", "ggplot2", "ggmap" )
### Loading Data  ###
# A nifty trick to load data from your clipboard:
# d <- read.delim("clipboard")
# Or from CSV:
# `myData` <- read.csv("C:/mypath/forward/slashes/myData.csv")
# But For this we will use randomly-generated data
# d = my dataframe. I use the letter d instead of something more descriptive because
# I ended up typing it so often.
d <- data.frame(col1 = sample(c(1,2), 10, replace = TRUE),
col2 = as.factor(sample(10)), col3 = letters[1:10],
col4 = sample(c(TRUE, FALSE), 10, replace = TRUE))
# I usually make a "1" column to make tabulations easier
d$Tab <- 1
# This adds a column with Somerville addresses for the mapping portion
d$Address <- sample(c("Highland AVe @ Somerville Ave", "41 Beacon St", "Weird St"), 10, replace = TRUE)
# And Finally I add a date column to the df for dat transformations
d$Date <- sample(c("1/1/2013", "3/20/2013", "6/22/2014"), 10, replace = TRUE) # make column
### Review your Data ###
View(d)
summary(d)
names(d)
class(d)
sapply(d[1,],class)
str(d) #number of observations, number of vars, class of variables
head(d, 20)
### Clean and Transorm your Data ###
# I often need to transorm data that is stored as factor or character to numeric
# For example, if there is a "?" in one cell, it will be stored as non numeric
d$col2Numeric <- as.numeric(as.character(d$col2)) # Transforms to numeric
# Sometimes variables stored as factors have characters that generate unexpected results when as.numeric is applied.
# Use gsub to remove these characters by removing them (technically, replacing them with nothing).
# For example, use this code if your values look like this: $1,000. For more on gsub see: http://www.endmemo.com/program/R/gsub.php
data$var.clean <- gsub("([/$,])", "", data$var)
data$var.clean <- as.numeric(data$var) #OR, more simply
data$var.clean <- as.numeric(gsub("([/$,])", "", data$var))
# Missing Values
missing <- is.na(d$col1)
sum(missing) #Number of missing values
sum(!missing) #Number of non-missing values
#OR
good <- complete.cases(d$col1)
sum(!good) #Number of missing values
sum(good) #Number of non-missing values
# Dropping (removing)
remove(good) #object
remove(missing) # also works with a dataframe
# To drop variable/column:
d$col1 <- NULL #column OR
d <- subset(d, select = -c(col1)) #OR
# To drop an observation/row
d <- d[-917,]
# To drop observations with a given value:
# d <- subset(d, col3 %in% c("a","b"))
# To Select an observation
newdata <- d[ which(d$col3=='a' | d$col3 == 'b'), ]
# To reshape data: see: http://www.ats.ucla.edu/stat/r/faq/reshape.htm
# Date
d$Date <- as.Date(d$Date,"%m/%d/%Y") # Tell R it's a date
d$Month <- format(d$Date, format='%m') # Break it into month, day, year...
d$Day <- format(d$Date, format='%d')
d$Year <- format(d$Date, format='%Y')
d$Month <- as.numeric(as.character(d$Month)) # Transform month to numeric for ifelse
# There are more nuanced ways of dividing seasons, but I prefer 4 even periods:
d$Season <- ifelse((d$Month >= 3) & (d$Month <= 5), "Spring",
ifelse((d$Month >= 6) & (d$Month <= 8), "Summer",
ifelse((d$Month >= 9) & (d$Month <= 11), "Fall", "Winter")))
# How to switch from Excel: the pivot table
aggregate(col2Numeric ~ Year, d, sum ) # makes a two-way table
# aggregate works for a couple of variables.
# "Cast" from reshape2 works when you have more than two variables:
# http://marcoghislanzoni.com/blog/2013/10/11/pivot-tables-in-r-with-melt-and-cast/
library(reshape2)
sapply(d[1,],class) #look at these again to see which columns to include
names(d) #look at the names
data.m <- melt(d, id=c(2:4, 5, 9:12), measure=c(8)) # id = non-numeric; measure = numeric
data.c <- dcast(data.m, Year ~ variable, sum)
library(plyr)
d <- d[order(-d$col2Numeric),] # sort it
# just the top 2 most frequent seasons
d.top <- subset(d, Season %in% arrange(count(d, .(Season)), desc(freq))[1:2,]$Season)
View(d.top)
###  Visualize ###
library(ggplot2)
library(scales) # for changing from scientific notation
# Example scale feature: scale_y_continuous(labels = comma) or scale_y_continuous(labels = dollar)
my.theme <-
theme(plot.background = element_blank(), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
panel.grid.minor = element_blank(), # Remove more gridlines
panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=24), # Enlarge axis text font
axis.title=element_text(size=26), # Enlarge axis title font
plot.title=element_text(size=42, hjust=0) # Enlarge, left-align title
#,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
p <- qplot(Year, data=d, geom="bar", fill=col4, alpha=I(.7), main="Incidents", ylab="Number of Incidents")
p + my.theme + facet_grid(. ~ Season) # Facet grid is the perfect way to add more to your X-axis
# A simple method is to use the "weight" function with qplot. This will even work with aggregate
p <- qplot(Year, weight = col2Numeric, data = data.c, geom = "bar", alpha=I(.7), main="Data By Year", ylab="Col2 Count")
p + my.theme + scale_y_continuous(labels = comma) # scale y is not useful here, but changes from
d <- read.delim("clipboard")
View(d)
d <- read.delim("clipboard")
d <- read.delim("clipboard")
setwd("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/)
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv")
d <- read.csv(K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv)
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv)
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv")
d <- read.csv("K:/Somerstat/Common/Data/2014 StreetStat/StateStreets/RoadInventory.csv")
summary(d)
hist(d$SurfaceWid)
hist(d$SurfaceWid)
d$FederalFun
hist(d$FederalFun)
hist(d$AssignedLe)
hist(d$EquationRo)
hist(d$Assigned_1)
table(d$SurfaceWid, d$FederalFun)
table(d$FederalFun, d$SurfaceWid)
aggregate(d$FederalFun ~ d$SurfaceWid, d, mean )
aggregate(d$SurfaceWid  ~ d$FederalFun, d, mean )
hist(d$FederalFun)
hist(d$Functional)
library(RCurl)
url<-c("sftp://somervillemadata@ftp2.ciacorp.com/index.html")
x <-getURL(url, userpwd="somervillemadata:today123")
require("maptools")
require("ggplot2")
require("plyr")
install.packages('maptools')
install.packages('rgdal')
library(ggplot2)
library(scales)
## Nominations http://en.wikipedia.org/wiki/Grammy_Award_records
N <- read.csv("./data//nominations.csv", stringsAsFactors = F)
N[6,1] <- "Beyonce"
for (i in 1:37 ) {
if(N[i,2] == "") N[i,2] = N[i-1,2]
}
mostN <- N[1:15,]
mostN$Nominations <- as.numeric(mostN$Nominations)
#### Visualize ####
purple = "#9b59b6"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=9), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=15,  hjust=0) # Enlarge, left-align title
#,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
N <- read.csv("./data/nominations.csv", stringsAsFactors = F)
setwd("c:/Users/dhadley/Documents/GitHub/Grammys")
N <- read.csv("./data/nominations.csv", stringsAsFactors = F)
N[6,1] <- "Beyonce"
for (i in 1:37 ) {
if(N[i,2] == "") N[i,2] = N[i-1,2]
}
mostN <- N[1:15,]
mostN$Nominations <- as.numeric(mostN$Nominations)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations))
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=purple)
+
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$NominationsFif), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
#### Visualize ####
purple = "#9b59b6"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=9), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=15,  hjust=0) # Enlarge, left-align title
#,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$NominationsFif), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=purple)
+
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$NominationsFif), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=isFemale) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
#### top wikipedia ####
top <- read.delim("./data/top.csv", stringsAsFactors = F)
top$isFemale <- FALSE
top$isFemale[23:39] <- TRUE
males <- top[1:22,]
females <- top[23:39,]
top[23,2] <- "Alison Krauss"
top[25,2] <- "Beyonce"
topTop <- top[1:25,]
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(colour="white", fill=purple)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(colour="white", fill=isFemale)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(colour="white", fill=topTop$isFemale)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(aes(colour="white", fill=topTop$isFemale))
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(aes(colour="white", fill=topTop$isFemale)) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(aes(colour="white", fill=topTop$isFemale)) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
coord_flip()
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(aes(colour="white", fill=topTop$isFemale)) +
my.theme + ggtitle("Top 15 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = topTop$Grammys), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(aes(colour="white", fill=lime_green)) +
my.theme + ggtitle("Top 25 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = topTop$Grammys), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(colour="white", fill=lime_green) +
my.theme + ggtitle("Top 25 Most Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = topTop$Grammys), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(colour="white", fill=lime_green) +
my.theme + ggtitle("Top 25 Individual Grammy Winners") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = topTop$Grammys), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyWins.png", dpi=300, width=5, height=5)
ggplot(mostN, aes(x=reorder(mostN$Artist, mostN$Nominations), y=mostN$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Top 15 Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyNoms.png", dpi=300, width=5, height=5)
ggplot(topTop, aes(x=reorder(topTop$Artist, topTop$Grammys), y=topTop$Grammys)) +
geom_bar(colour="white", fill=lime_green) +
my.theme + ggtitle("Top 25 Individual Grammy Winners") + xlab(NULL) +
ylab("Grammys as of 56th Grammy Awards") +
geom_text(aes(label = topTop$Grammys), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyWins.png", dpi=300, width=5, height=5)
library(ggplot2)
library(scales)
setwd("c:/Users/dhadley/Documents/GitHub/Grammys")
setwd("/Users/dphnrome/Documents/Git/Grammys")
#### d ####
d <- read.csv("./data/grammysTo2014.csv")
d$Tab <- 1
t <- aggregate(d$Year, d$Tab)
t <- aggregate(d$Year, d$Tab, FUN=sum)
t <- aggregate(d$Tab, d$Year, FUN=sum)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
View(t)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(topTop, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour="white", fill=lime_green)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour="white", fill=lime_green)
#### Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=9), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=15,  hjust=0) # Enlarge, left-align title
#,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour="white", fill=lime_green)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour="white", fill=lime_green) +
my.theme + ggtitle("Top 25 Individual Grammy Winners") + xlab(NULL) +
ylab("Grammys as of 56th Grammy Awards") +
geom_text(aes(label = topTop$Grammys), size = 2, color= "grey", hjust = -.25)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour="white", fill=lime_green) +
my.theme + ggtitle("Top 25 Individual Grammy Winners") + xlab(NULL) +
ylab("Grammys as of 56th Grammy Awards") +
geom_text(aes(label = t$'d$Tab'), size = 2, color= "grey", hjust = -.25)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour=lime_green) +
my.theme + ggtitle("Top 25 Individual Grammy Winners") + xlab(NULL) +
ylab("Grammys as of 56th Grammy Awards")
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour=lime_green) +
my.theme + ggtitle("Number of Grammys Awarded Over Time") + xlab("Year") +
ylab("Grammy Awards") +
scale_y_continuous(labels = comma)
getwd()
ggsave("./plots/grammyAwards.png", dpi=300, width=5, height=5)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour=lime_green) +
my.theme + ggtitle("Grammy Award Categories Over Time") + xlab("Year") +
ylab("Grammy Awards Per Year") +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyAwards.png", dpi=300, width=5, height=5)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(aes(colour=lime_green, size = 2)) +
my.theme + ggtitle("Grammy Award Categories Over Time") + xlab("Year") +
ylab("Grammy Awards Per Year") +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyAwards.png", dpi=300, width=5, height=5)
t <- aggregate(d$Tab ~ d$Year, FUN=sum)
ggplot(t, aes(x=t$'d$Year', y=t$'d$Tab')) +
geom_line(colour=lime_green, size = 2) +
my.theme + ggtitle("Grammy Award Categories Over Time") + xlab("Year") +
ylab("Grammy Awards Per Year") +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyAwards.png", dpi=300, width=5, height=5)
N <- read.csv("./data/nominations.csv", stringsAsFactors = F)
N[6,1] <- "Beyonce"
for (i in 1:37 ) {
if(N[i,2] == "") N[i,2] = N[i-1,2]
}
mostN <- N[1:15,]
mostN$Nominations <- as.numeric(mostN$Nominations)
N$Nominations <- as.numeric(N$Nominations)
View(N)
summary(N$Nominations)
N[22,1] <- "Bjork"
Nwo <- N[18:37,] # most without winning
#### Visualize ####
lime_green = "#2ecc71"
soft_blue = "#3498db"
pinkish_red = "#e74c3c"
purple = "#9b59b6"
teele = "#1abc9c"
nice_blue = "#2980b9"
my.theme <-
theme(#plot.background = element_rect(fill="white"), # Remove background
panel.grid.major = element_blank(), # Remove gridlines
# panel.grid.minor = element_blank(), # Remove more gridlines
# panel.border = element_blank(), # Remove border
panel.background = element_blank(), # Remove more background
axis.ticks = element_blank(), # Remove axis ticks
axis.text=element_text(size=9), # Enlarge axis text font
axis.title=element_text(size=8), # Enlarge axis title font
plot.title=element_text(size=15,  hjust=0) # Enlarge, left-align title
#,axis.text.x = element_text(angle=60, hjust = 1) # Uncomment if X-axis unreadable
)
ggplot(Nwo, aes(x=reorder(Nwo$Artist, Nwo$Nominations), y=Nwo$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Top 15 Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = mostN$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggplot(Nwo, aes(x=reorder(Nwo$Artist, Nwo$Nominations), y=Nwo$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Top 15 Grammy Nominations") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = Nwo$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
View(N)
ggplot(Nwo, aes(x=reorder(Nwo$Artist, Nwo$Nominations), y=Nwo$Nominations)) +
geom_bar(colour="white", fill=purple) +
my.theme + ggtitle("Most Nominations Without An Award") + xlab(NULL) +
ylab("Nominations as of 57th Grammy Awards") +
geom_text(aes(label = Nwo$Nominations), size = 2, color= "grey", hjust = -.25)+
coord_flip() +
scale_y_continuous(labels = comma)
ggsave("./plots/grammyNomswo.png", dpi=300, width=5, height=5)
